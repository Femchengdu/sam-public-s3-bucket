AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  resume-challenge-s3

  Sample SAM Template for resume-challenge-s3

Parameters:
  RootDomainName:
    Type: String
    Default: samuel-ajayi.click

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  ResumeS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      BucketName: !Ref RootDomainName
      PublicAccessBlockConfiguration: # The following makes the S3 bucket public for reading and writing.
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
    DeletionPolicy: Delete # Delete when stack is destroyed

  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ResumeS3Bucket
                - /*
      Bucket: !Ref ResumeS3Bucket

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"

  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z057248412IHITD2YIZ94 # Get me from Route53
      RecordSets:
        - Name: !Ref RootDomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution
            DNSName: !GetAtt MyDistribution.DomainName

  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref RootDomainName
      ValidationMethod: DNS

  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:673854605700:certificate/ca357a4a-f18c-4fbd-9faa-9dffbd7f7601 # Using !Ref MyCertificate returns a value for eu-west-1
          SslSupportMethod: sni-only
        Aliases:
          - !Ref RootDomainName
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: samuel-ajayi.click.s3-website-eu-west-1.amazonaws.com
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: samuel-ajayi.click.s3-website-eu-west-1.amazonaws.com
            Id: samuel-ajayi.click.s3-website-eu-west-1.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: http-only # This is needed to avoid errors linking couldfront to S3 bucket
        Enabled: true
        DefaultRootObject: index.html

  GetCountFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-count-fn/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /get
            Method: get
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  PutCountFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put-count-fn/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /put
            Method: put
        Options:
          Type: Api
          Properties:
            Path: /put
            Method: options
            # Auth:
            #   ApiKeyRequired: false
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetCountFnAPI:
    Description: "API Gateway endpoint URL for Prod stage for get count function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get"

  GetCountFn:
    Description: "Get count Lambda Function ARN"
    Value: !GetAtt GetCountFn.Arn

  GetCountFnIamRole:
    Description: "Implicit IAM Role created for get count function"
    Value: !GetAtt GetCountFnRole.Arn

  PutCountFnAPI:
    Description: "API Gateway endpoint URL for Prod stage for put count function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/put"

  PutCountFn:
    Description: "Put count Lambda Function ARN"
    Value: !GetAtt PutCountFn.Arn

  PutCountFnIamRole:
    Description: "Implicit IAM Role created for put count function"
    Value: !GetAtt PutCountFnRole.Arn

  ResumeS3BucketSecureURL:
    Description: Name of S3 bucket to hold website content
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - ResumeS3Bucket
          - DomainName
