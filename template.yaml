AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  resume-challenge-s3

  Sample SAM Template for resume-challenge-s3

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
  ResumeS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: my-resume-website-sam-aj-tech
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      PublicAccessBlockConfiguration: # The following makes the S3 bucket public for reading and writing.
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000
    DeletionPolicy: Delete # Delete when stack is destroyed
  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ResumeS3Bucket
                - /*
          - Sid: PublicListBuckets
            Effect: Allow
            Principal: "*"
            Action:
              - s3:ListBucket
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref ResumeS3Bucket
      Bucket: !Ref ResumeS3Bucket

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
  WebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt
      - ResumeS3Bucket
      - WebsiteURL
  ResumeS3BucketSecureURL:
    Description: Name of S3 bucket to hold website content
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - ResumeS3Bucket
          - DomainName
